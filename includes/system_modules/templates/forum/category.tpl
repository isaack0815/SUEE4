{* Kategorie-Ansicht *}
{include file="header.tpl" title="{$category.name} - Forum"}

<div class="container mt-4">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="index.php">Forum</a></li>
            <li class="breadcrumb-item active" aria-current="page">{$category.name}</li>
        </ol>
    </nav>
    
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1>{$category.name}</h1>
        {if $can_create_topic}
            <a href="index.php?action=new_topic&category_id={$category.category_id}" class="btn btn-primary">
                <i class="fas fa-plus-circle"></i> Neues Thema
            </a>
        {/if}
    </div>
    
    {if $category.description}
        <p class="text-muted mb-4">{$category.description}</p>
    {/if}
    
    <div class="card mb-4">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">Themen</h5>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>Thema</th>
                            <th class="text-center">Antworten</th>
                            <th class="text-center">Aufrufe</th>
                            <th>Erstellt von</th>
                            <th>Letzte Aktivität</th>
                        </tr>
                    </thead>
                    <tbody>
                        {if $topics}
                            {foreach from=$topics item=topic}
                                <tr>
                                    <td>
                                        {if $topic.is_sticky}<span class="badge bg-warning me-1">Wichtig</span>{/if}
                                        {if $topic.is_locked}<span class="badge bg-secondary me-1">Geschlossen</span>{/if}
                                        <a href="index.php?action=view_topic&id={$topic.topic_id}" class="fw-bold text-decoration-none">
                                            {$topic.title}
                                        </a>
                                    </td>
                                    <td class="text-center align-middle">{$topic.posts_count - 1}</td>
                                    <td class="text-center align-middle">{$topic.views}</td>
                                    <td class="align-middle">{$topic.username}</td>
                                    <td class="align-middle">
                                        <small class="text-muted">{$topic.created_at|date_format:"%d.%m.%Y %H:%M"}</small>
                                    </td>
                                </tr>
                            {/foreach}
                        {else}
                            <tr>
                                <td colspan="5" class="text-center py-3">Keine Themen gefunden.</td>
                            </tr>
                        {/if}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    
    {if $totalPages > 1}
        <nav aria-label="Seitennavigation">
            <ul class="pagination justify-content-center">
                {if $page > 1}
                    <li class="page-item">
                        <a class="page-link" href="index.php?action=view_category&id={$category.category_id}&page={$page-1}">Zurück</a>
                    </li>
                {else}
                    <li class="page-item disabled">
                        <span class="page-link">Zurück</span>
                    </li>
                {/if}
                
                {for $i=1 to $totalPages}
                    <li class="page-item {if $i == $page}active{/if}">
                        <a class="page-link" href="index.php?action=view_category&id={$category.category_id}&page={$i}">{$i}</a>
                    </li>
                {/for}
                
                {if $page < $totalPages}
                    <li class="page-item">
                        <a class="page-link" href="index.php?action=view_category&id={$category.category_id}&page={$page+1}">Weiter</a>
                    </li>
                {else}
                    <li class="page-item disabled">
                        <span class="page-link">Weiter</span>
                    </li>
                {/if}
            </ul>
        </nav>
    {/if}
</div>

{include file="footer.tpl"}
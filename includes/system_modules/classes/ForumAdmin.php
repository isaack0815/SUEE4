<?php
/**
 * ForumAdmin-Klasse
 * 
 * Klasse für die Verwaltung des Forums im Admin-Bereich
 */
class ForumAdmin {
    private $db;
    private $user;
    
    /**
     * Konstruktor
     * 
     * @param Database $db Datenbankverbindung
     * @param User $user Aktueller Benutzer
     */
    public function __construct($db, $user) {
        $this->db = $db;
        $this->user = $user;
    }
    
    /**
     * Prüft, ob der Benutzer Admin-Berechtigungen hat
     * 
     * @return bool True, wenn der Benutzer Admin-Berechtigungen hat
     */
    public function hasAdminPermission() {
        return $this->user->hasPermission('forum_admin');
    }
    
    /**
     * Gibt alle Kategorien zurück
     * 
     * @return array Kategorien
     */
    public function getCategories() {
        $dbConnection = $this->db->getConnection();
        $stmt = $dbConnection->prepare("
            SELECT c.*, 
                   (SELECT COUNT(*) FROM forum_topics WHERE category_id = c.category_id) as topics_count,
                   (SELECT COUNT(*) FROM forum_posts p JOIN forum_topics t ON p.topic_id = t.topic_id WHERE t.category_id = c.category_id) as posts_count
            FROM forum_categories c
            ORDER BY c.sort_order ASC, c.name ASC
        ");
        $stmt->execute();
        
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
    
    /**
     * Gibt eine Kategorie anhand ihrer ID zurück
     * 
     * @param int $categoryId Kategorie-ID
     * @return array|false Kategorie oder false, wenn nicht gefunden
     */
    public function getCategory($categoryId) {
        $dbConnection = $this->db->getConnection();
        $stmt = $dbConnection->prepare("
            SELECT * FROM forum_categories 
            WHERE category_id = ?
        ");
        $stmt->execute([$categoryId]);
        
        return $stmt->fetch(PDO::FETCH_ASSOC);
    }
    
    /**
     * Erstellt eine neue Kategorie
     * 
     * @param string $name Name der Kategorie
     * @param string $description Beschreibung der Kategorie
     * @param int $sortOrder Sortierreihenfolge
     * @param bool $isActive Aktiv-Status
     * @return int|false ID der neuen Kategorie oder false bei Fehler
     */
    public function createCategory($name, $description, $sortOrder = 0, $isActive = true) {
        if (!$this->hasAdminPermission()) {
            return false;
        }
        
        $dbConnection = $this->db->getConnection();
        $stmt = $dbConnection->prepare("
            INSERT INTO forum_categories 
            (name, description, sort_order, is_active, created_at, updated_at) 
            VALUES (?, ?, ?, ?, NOW(), NOW())
        ");
        
        if ($stmt->execute([$name, $description, $sortOrder, $isActive ? 1 : 0])) {
            return $dbConnection->lastInsertId();
        }
        
        return false;
    }
    
    /**
     * Aktualisiert eine Kategorie
     * 
     * @param int $categoryId Kategorie-ID
     * @param string $name Name der Kategorie
     * @param string $description Beschreibung der Kategorie
     * @param int $sortOrder Sortierreihenfolge
     * @param bool $isActive Aktiv-Status
     * @return bool True bei Erfolg, false bei Fehler
     */
    public function updateCategory($categoryId, $name, $description, $sortOrder = 0, $isActive = true) {
        if (!$this->hasAdminPermission()) {
            return false;
        }
        
        $dbConnection = $this->db->getConnection();
        $stmt = $dbConnection->prepare("
            UPDATE forum_categories 
            SET name = ?, description = ?, sort_order = ?, is_active = ?, updated_at = NOW() 
            WHERE category_id = ?
        ");
        
        return $stmt->execute([$name, $description, $sortOrder, $isActive ? 1 : 0, $categoryId]);
    }
    
    /**
     * Löscht eine Kategorie
     * 
     * @param int $categoryId Kategorie-ID
     * @return bool True bei Erfolg, false bei Fehler
     */
    public function deleteCategory($categoryId) {
        if (!$this->hasAdminPermission()) {
            return false;
        }
        
        $dbConnection = $this->db->getConnection();
        
        // Prüfen, ob die Kategorie Themen enthält
        $stmt = $dbConnection->prepare("
            SELECT COUNT(*) as count FROM forum_topics 
            WHERE category_id = ?
        ");
        $stmt->execute([$categoryId]);
        $result = $stmt->fetch(PDO::FETCH_ASSOC);
        
        if ($result['count'] > 0) {
            // Kategorie enthält Themen und kann nicht gelöscht werden
            return false;
        }
        
        $stmt = $dbConnection->prepare("
            DELETE FROM forum_categories 
            WHERE category_id = ?
        ");
        
        return $stmt->execute([$categoryId]);
    }
    
    /**
     * Gibt alle Themen in einer Kategorie zurück
     * 
     * @param int $categoryId Kategorie-ID
     * @return array Themen
     */
    public function getTopicsByCategory($categoryId) {
        $dbConnection = $this->db->getConnection();
        $stmt = $dbConnection->prepare("
            SELECT t.*, u.username, 
                   (SELECT COUNT(*) FROM forum_posts WHERE topic_id = t.topic_id) as posts_count
            FROM forum_topics t
            JOIN users u ON t.user_id = u.id
            WHERE t.category_id = ?
            ORDER BY t.is_sticky DESC, t.created_at DESC
        ");
        $stmt->execute([$categoryId]);
        
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
    
    /**
     * Gibt ein Thema anhand seiner ID zurück
     * 
     * @param int $topicId Themen-ID
     * @return array|false Thema oder false, wenn nicht gefunden
     */
    public function getTopic($topicId) {
        $dbConnection = $this->db->getConnection();
        $stmt = $dbConnection->prepare("
            SELECT t.*, c.name as category_name
            FROM forum_topics t
            JOIN forum_categories c ON t.category_id = c.category_id
            WHERE t.topic_id = ?
        ");
        $stmt->execute([$topicId]);
        
        return $stmt->fetch(PDO::FETCH_ASSOC);
    }
    
    /**
     * Aktualisiert ein Thema
     * 
     * @param int $topicId Themen-ID
     * @param string $title Titel des Themas
     * @param int $categoryId Kategorie-ID
     * @param bool $isSticky Wichtig-Status
     * @param bool $isLocked Gesperrt-Status
     * @return bool True bei Erfolg, false bei Fehler
     */
    public function updateTopic($topicId, $title, $categoryId, $isSticky = false, $isLocked = false) {
        if (!$this->hasAdminPermission()) {
            return false;
        }
        
        $dbConnection = $this->db->getConnection();
        $stmt = $dbConnection->prepare("
            UPDATE forum_topics 
            SET title = ?, category_id = ?, is_sticky = ?, is_locked = ?, updated_at = NOW() 
            WHERE topic_id = ?
        ");
        
        return $stmt->execute([$title, $categoryId, $isSticky ? 1 : 0, $isLocked ? 1 : 0, $topicId]);
    }
    
    /**
     * Löscht ein Thema und alle zugehörigen Beiträge
     * 
     * @param int $topicId Themen-ID
     * @return bool True bei Erfolg, false bei Fehler
     */
    public function deleteTopic($topicId) {
        if (!$this->hasAdminPermission()) {
            return false;
        }
        
        $dbConnection = $this->db->getConnection();
        
        try {
            $dbConnection->beginTransaction();
            
            // Beiträge löschen
            $stmt = $dbConnection->prepare("
                DELETE FROM forum_posts 
                WHERE topic_id = ?
            ");
            $stmt->execute([$topicId]);
            
            // Thema löschen
            $stmt = $dbConnection->prepare("
                DELETE FROM forum_topics 
                WHERE topic_id = ?
            ");
            $stmt->execute([$topicId]);
            
            $dbConnection->commit();
            
            return true;
        } catch (Exception $e) {
            $dbConnection->rollBack();
            return false;
        }
    }
}
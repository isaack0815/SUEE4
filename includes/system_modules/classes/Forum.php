<?php
/**
 * Forum-Klasse
 * 
 * Hauptklasse für die Forumfunktionalität
 */
class Forum {
    private $db;
    private $user;
    
    /**
     * Konstruktor
     * 
     * @param Database $db Datenbankverbindung
     * @param User $user Aktueller Benutzer
     */
    public function __construct($db, $user) {
        $this->db = $db;
        $this->user = $user;
    }
    
    /**
     * Gibt alle Kategorien mit Foren zurück
     * 
     * @return array Kategorien mit Foren
     */
    public function getCategories() {
        $categories = [];
        
        $dbConnection = $this->db->getConnection();
        $stmt = $dbConnection->prepare("
            SELECT * FROM forum_categories 
            WHERE is_active = 1
            ORDER BY sort_order ASC, name ASC
        ");
        $stmt->execute();
        
        while ($category = $stmt->fetch(PDO::FETCH_ASSOC)) {
            $category['topics_count'] = $this->getCategoryTopicsCount($category['category_id']);
            $category['posts_count'] = $this->getCategoryPostsCount($category['category_id']);
            $categories[] = $category;
        }
        
        return $categories;
    }
    
    /**
     * Gibt die Anzahl der Themen in einer Kategorie zurück
     * 
     * @param int $categoryId Kategorie-ID
     * @return int Anzahl der Themen
     */
    public function getCategoryTopicsCount($categoryId) {
        $dbConnection = $this->db->getConnection();
        $stmt = $dbConnection->prepare("
            SELECT COUNT(*) as count FROM forum_topics 
            WHERE category_id = ?
        ");
        $stmt->execute([$categoryId]);
        $result = $stmt->fetch(PDO::FETCH_ASSOC);
        
        return $result['count'];
    }
    
    /**
     * Gibt die Anzahl der Beiträge in einer Kategorie zurück
     * 
     * @param int $categoryId Kategorie-ID
     * @return int Anzahl der Beiträge
     */
    public function getCategoryPostsCount($categoryId) {
        $dbConnection = $this->db->getConnection();
        $stmt = $dbConnection->prepare("
            SELECT COUNT(*) as count FROM forum_posts p
            JOIN forum_topics t ON p.topic_id = t.topic_id
            WHERE t.category_id = ?
        ");
        $stmt->execute([$categoryId]);
        $result = $stmt->fetch(PDO::FETCH_ASSOC);
        
        return $result['count'];
    }
    
    /**
     * Gibt eine Kategorie anhand ihrer ID zurück
     * 
     * @param int $categoryId Kategorie-ID
     * @return array|false Kategorie oder false, wenn nicht gefunden
     */
    public function getCategory($categoryId) {
        $dbConnection = $this->db->getConnection();
        $stmt = $dbConnection->prepare("
            SELECT * FROM forum_categories 
            WHERE category_id = ? AND is_active = 1
        ");
        $stmt->execute([$categoryId]);
        
        return $stmt->fetch(PDO::FETCH_ASSOC);
    }
    
    /**
     * Gibt alle Themen in einer Kategorie zurück
     * 
     * @param int $categoryId Kategorie-ID
     * @param int $page Seitennummer
     * @param int $perPage Einträge pro Seite
     * @return array Themen
     */
    public function getTopics($categoryId, $page = 1, $perPage = 20) {
        $offset = ($page - 1) * $perPage;
        
        $dbConnection  $page = 1, $perPage = 20) {
        $offset = ($page - 1) * $perPage;
        
        $dbConnection = $this->db->getConnection();
        $stmt = $dbConnection->prepare("
            SELECT t.*, u.username, 
                   (SELECT COUNT(*) FROM forum_posts WHERE topic_id = t.topic_id) as posts_count
            FROM forum_topics t
            JOIN users u ON t.user_id = u.id
            WHERE t.category_id = ?
            ORDER BY t.is_sticky DESC, t.created_at DESC
            LIMIT ? OFFSET ?
        ");
        $stmt->execute([$categoryId, $perPage, $offset]);
        
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
    
    /**
     * Gibt die Gesamtanzahl der Themen in einer Kategorie zurück
     * 
     * @param int $categoryId Kategorie-ID
     * @return int Gesamtanzahl der Themen
     */
    public function getTopicsCount($categoryId) {
        $dbConnection = $this->db->getConnection();
        $stmt = $dbConnection->prepare("
            SELECT COUNT(*) as count FROM forum_topics 
            WHERE category_id = ?
        ");
        $stmt->execute([$categoryId]);
        $result = $stmt->fetch(PDO::FETCH_ASSOC);
        
        return $result['count'];
    }
    
    /**
     * Gibt ein Thema anhand seiner ID zurück
     * 
     * @param int $topicId Themen-ID
     * @return array|false Thema oder false, wenn nicht gefunden
     */
    public function getTopic($topicId) {
        $dbConnection = $this->db->getConnection();
        $stmt = $dbConnection->prepare("
            SELECT t.*, c.name as category_name, u.username
            FROM forum_topics t
            JOIN forum_categories c ON t.category_id = c.category_id
            JOIN users u ON t.user_id = u.id
            WHERE t.topic_id = ?
        ");
        $stmt->execute([$topicId]);
        
        $topic = $stmt->fetch(PDO::FETCH_ASSOC);
        
        if ($topic) {
            // Anzahl der Aufrufe erhöhen
            $this->incrementTopicViews($topicId);
        }
        
        return $topic;
    }
    
    /**
     * Erhöht die Anzahl der Aufrufe eines Themas
     * 
     * @param int $topicId Themen-ID
     */
    private function incrementTopicViews($topicId) {
        $dbConnection = $this->db->getConnection();
        $stmt = $dbConnection->prepare("
            UPDATE forum_topics 
            SET views = views + 1 
            WHERE topic_id = ?
        ");
        $stmt->execute([$topicId]);
    }
    
    /**
     * Gibt alle Beiträge in einem Thema zurück
     * 
     * @param int $topicId Themen-ID
     * @param int $page Seitennummer
     * @param int $perPage Einträge pro Seite
     * @return array Beiträge
     */
    public function getPosts($topicId, $page = 1, $perPage = 20) {
        $offset = ($page - 1) * $perPage;
        
        $dbConnection = $this->db->getConnection();
        $stmt = $dbConnection->prepare("
            SELECT p.*, u.username, u.avatar
            FROM forum_posts p
            JOIN users u ON p.user_id = u.id
            WHERE p.topic_id = ?
            ORDER BY p.created_at ASC
            LIMIT ? OFFSET ?
        ");
        $stmt->execute([$topicId, $perPage, $offset]);
        
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
    
    /**
     * Gibt die Gesamtanzahl der Beiträge in einem Thema zurück
     * 
     * @param int $topicId Themen-ID
     * @return int Gesamtanzahl der Beiträge
     */
    public function getPostsCount($topicId) {
        $dbConnection = $this->db->getConnection();
        $stmt = $dbConnection->prepare("
            SELECT COUNT(*) as count FROM forum_posts 
            WHERE topic_id = ?
        ");
        $stmt->execute([$topicId]);
        $result = $stmt->fetch(PDO::FETCH_ASSOC);
        
        return $result['count'];
    }
    
    /**
     * Erstellt ein neues Thema
     * 
     * @param int $categoryId Kategorie-ID
     * @param string $title Titel des Themas
     * @param string $content Inhalt des ersten Beitrags
     * @return int|false ID des neuen Themas oder false bei Fehler
     */
    public function createTopic($categoryId, $title, $content) {
        if (!$this->user->isLoggedIn()) {
            return false;
        }
        
        $dbConnection = $this->db->getConnection();
        
        try {
            $dbConnection->beginTransaction();
            
            // Thema erstellen
            $stmt = $dbConnection->prepare("
                INSERT INTO forum_topics 
                (category_id, user_id, title, content, created_at, updated_at) 
                VALUES (?, ?, ?, ?, NOW(), NOW())
            ");
            $stmt->execute([$categoryId, $this->user->getUserId(), $title, $content]);
            $topicId = $dbConnection->lastInsertId();
            
            // Ersten Beitrag erstellen
            $stmt = $dbConnection->prepare("
                INSERT INTO forum_posts 
                (topic_id, user_id, content, created_at, updated_at) 
                VALUES (?, ?, ?, NOW(), NOW())
            ");
            $stmt->execute([$topicId, $this->user->getUserId(), $content]);
            
            $dbConnection->commit();
            
            return $topicId;
        } catch (Exception $e) {
            $dbConnection->rollBack();
            return false;
        }
    }
    
    /**
     * Erstellt eine Antwort auf ein Thema
     * 
     * @param int $topicId Themen-ID
     * @param string $content Inhalt des Beitrags
     * @return int|false ID des neuen Beitrags oder false bei Fehler
     */
    public function createReply($topicId, $content) {
        if (!$this->user->isLoggedIn()) {
            return false;
        }
        
        $dbConnection = $this->db->getConnection();
        
        try {
            // Beitrag erstellen
            $stmt = $dbConnection->prepare("
                INSERT INTO forum_posts 
                (topic_id, user_id, content, created_at, updated_at) 
                VALUES (?, ?, ?, NOW(), NOW())
            ");
            $stmt->execute([$topicId, $this->user->getUserId(), $content]);
            
            // Thema aktualisieren
            $stmt = $dbConnection->prepare("
                UPDATE forum_topics 
                SET updated_at = NOW() 
                WHERE topic_id = ?
            ");
            $stmt->execute([$topicId]);
            
            return $dbConnection->lastInsertId();
        } catch (Exception $e) {
            return false;
        }
    }
}
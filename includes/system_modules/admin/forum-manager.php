<?php
/**
 * Admin-Bereich für die Verwaltung des Forums
 * 
 * Ermöglicht das Erstellen, Bearbeiten und Löschen von Kategorien und Themen.
 */

// Sitzung starten
session_start();

// Konfiguration und Datenbankverbindung einbinden
require_once __DIR__ . '/../../includes/config.php';
require_once __DIR__ . '/../../classes/Database.php';
require_once __DIR__ . '/../../classes/User.php';
require_once __DIR__ . '/../../classes/Permission.php';
require_once __DIR__ . '/../../classes/Logger.php';
require_once __DIR__ . '/../../classes/ForumAdmin.php';

// Smarty-Template-Engine einbinden
require_once __DIR__ . '/../../includes/smarty.php';

// Benutzer-Objekt erstellen
$user = new User();

// Überprüfen, ob der Benutzer angemeldet ist
if (!$user->isLoggedIn()) {
    // Benutzer ist nicht angemeldet, zur Anmeldeseite weiterleiten
    header('Location: ../../login.php');
    exit;
}

// Überprüfen, ob der Benutzer die Berechtigung hat, das Forum zu verwalten
$permission = new Permission();
if (!$permission->hasPermission($user->getUserId(), 'forum_admin')) {
    // Benutzer hat keine Berechtigung, zur Startseite weiterleiten
    header('Location: ../../index.php');
    exit;
}

// Datenbankverbindung herstellen
$db = Database::getInstance();

// Logger-Instanz abrufen
$logger = Logger::getInstance();

// ForumAdmin-Klasse initialisieren
$forumAdmin = new ForumAdmin($db, $user);

// Aktion bestimmen
$action = isset($_GET['action']) ? $_GET['action'] : 'list';

// Je nach Aktion unterschiedliche Inhalte anzeigen
switch ($action) {
    case 'add_category':
        // Neue Kategorie hinzufügen
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $name = isset($_POST['name']) ? trim($_POST['name']) : '';
            $description = isset($_POST['description']) ? trim($_POST['description']) : '';
            $sortOrder = isset($_POST['sort_order']) ? (int)$_POST['sort_order'] : 0;
            $isActive = isset($_POST['is_active']) ? true : false;
            
            // Validierung
            $errors = [];
            
            if (empty($name)) {
                $errors[] = 'Bitte geben Sie einen Namen ein.';
            }
            
            if (empty($errors)) {
                // Kategorie erstellen
                $categoryId = $forumAdmin->createCategory($name, $description, $sortOrder, $isActive);
                
                if ($categoryId) {
                    // Protokollieren
                    $logger->info("Neue Forumkategorie erstellt", "forum", [
                        'user_id' => $user->getUserId(),
                        'category_id' => $categoryId,
                        'category_name' => $name
                    ]);
                    
                    // Erfolgsmeldung setzen
                    $_SESSION['success_message'] = 'Kategorie erfolgreich erstellt.';
                    
                    // Weiterleitung zur Kategorieliste
                    header('Location: forum-manager.php');
                    exit;
                } else {
                    $errors[] = 'Ein Fehler ist aufgetreten. Bitte versuchen Sie es später erneut.';
                }
            }
            
            // Fehler an das Template übergeben
            $smarty->assign('errors', $errors);
            $smarty->assign('name', $name);
            $smarty->assign('description', $description);
            $smarty->assign('sort_order', $sortOrder);
            $smarty->assign('is_active', $isActive);
        }
        
        // Template anzeigen
        $smarty->display('admin/forum/add_category.tpl');
        break;
        
    case 'edit_category':
        // Kategorie bearbeiten
        $categoryId = isset($_GET['id']) ? (int)$_GET['id'] : 0;
        
        if ($categoryId <= 0) {
            header('Location: forum-manager.php');
            exit;
        }
        
        // Kategorie abrufen
        $category = $forumAdmin->getCategory($categoryId);
        
        if (!$category) {
            header('Location: forum-manager.php');
            exit;
        }
        
        // Wenn das Formular abgesendet wurde
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $name = isset($_POST['name']) ? trim($_POST['name']) : '';
            $description = isset($_POST['description']) ? trim($_POST['description']) : '';
            $sortOrder = isset($_POST['sort_order']) ? (int)$_POST['sort_order'] : 0;
            $isActive = isset($_POST['is_active']) ? true : false;
            
            // Validierung
            $errors = [];
            
            if (empty($name)) {
                $errors[] = 'Bitte geben Sie einen Namen ein.';
            }
            
            if (empty($errors)) {
                // Kategorie aktualisieren
                $success = $forumAdmin->updateCategory($categoryId, $name, $description, $sortOrder, $isActive);
                
                if ($success) {
                    // Protokollieren
                    $logger->info("Forumkategorie aktualisiert", "forum", [
                        'user_id' => $user->getUserId(),
                        'category_id' => $categoryId,
                        'category_name' => $name
                    ]);
                    
                    // Erfolgsmeldung setzen
                    $_SESSION['success_message'] = 'Kategorie erfolgreich aktualisiert.';
                    
                    // Weiterleitung zur Kategorieliste
                    header('Location: forum-manager.php');
                    exit;
                } else {
                    $errors[] = 'Ein Fehler ist aufgetreten. Bitte versuchen Sie es später erneut.';
                }
            }
            
            // Fehler an das Template übergeben
            $smarty->assign('errors', $errors);
            $smarty->assign('category', [
                'category_id' => $categoryId,
                'name' => $name,
                'description' => $description,
                'sort_order' => $sortOrder,
                'is_active' => $isActive
            ]);
        } else {
            // Kategorie an das Template übergeben
            $smarty->assign('category', $category);
        }
        
        // Template anzeigen
        $smarty->display('admin/forum/edit_category.tpl');
        break;
        
    case 'delete_category':
        // Kategorie löschen
        $categoryId = isset($_GET['id']) ? (int)$_GET['id'] : 0;
        
        if ($categoryId <= 0) {
            header('Location: forum-manager.php');
            exit;
        }
        
        // Kategorie abrufen
        $category = $forumAdmin->getCategory($categoryId);
        
        if (!$category) {
            header('Location: forum-manager.php');
            exit;
        }
        
        // Wenn das Formular abgesendet wurde
        if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['confirm'])) {
            // Kategorie löschen
            $success = $forumAdmin->deleteCategory($categoryId);
            
            if ($success) {
                // Protokollieren
                $logger->info("Forumkategorie gelöscht", "forum", [
                    'user_id' => $user->getUserId(),
                    'category_id' => $categoryId,
                    'category_name' => $category['name']
                ]);
                
                // Erfolgsmeldung setzen
                $_SESSION['success_message'] = 'Kategorie erfolgreich gelöscht.';
                
                // Weiterleitung zur Kategorieliste
                header('Location: forum-manager.php');
                exit;
            } else {
                $smarty->assign('error', 'Die Kategorie konnte nicht gelöscht werden. Möglicherweise enthält sie noch Themen.');
            }
        }
        
        // Kategorie an das Template übergeben
        $smarty->assign('category', $category);
        
        // Template anzeigen
        $smarty->display('admin/forum/delete_category.tpl');
        break;
        
    case 'manage_topics':
        // Themen einer Kategorie verwalten
        $categoryId = isset($_GET['category_id']) ? (int)$_GET['category_id'] : 0;
        
        if ($categoryId <= 0) {
            header('Location: forum-manager.php');
            exit;
        }
        
        // Kategorie abrufen
        $category = $forumAdmin->getCategory($categoryId);
        
        if (!$category) {
            header('Location: forum-manager.php');
            exit;
        }
        
        // Themen abrufen
        $topics = $forumAdmin->getTopicsByCategory($categoryId);
        
        // Daten an das Template übergeben
        $smarty->assign('category', $category);
        $smarty->assign('topics', $topics);
        
        // Template anzeigen
        $smarty->display('admin/forum/manage_topics.tpl');
        break;
        
    case 'edit_topic':
        // Thema bearbeiten
        $topicId = isset($_GET['id']) ? (int)$_GET['id'] : 0;
        
        if ($topicId <= 0) {
            header('Location: forum-manager.php');
            exit;
        }
        
        // Thema abrufen
        $topic = $forumAdmin->getTopic($topicId);
        
        if (!$topic) {
            header('Location: forum-manager.php');
            exit;
        }
        
        // Kategorien abrufen
        $categories = $forumAdmin->getCategories();
        
        // Wenn das Formular abgesendet wurde
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $title = isset($_POST['title']) ? trim($_POST['title']) : '';
            $categoryId = isset($_POST['category_id']) ? (int)$_POST['category_id'] : 0;
            $isSticky = isset($_POST['is_sticky']) ? true : false;
            $isLocked = isset($_POST['is_locked']) ? true : false;
            
            // Validierung
            $errors = [];
            
            if (empty($title)) {
                $errors[] = 'Bitte geben Sie einen Titel ein.';
            }
            
            if ($categoryId <= 0) {
                $errors[] = 'Bitte wählen Sie eine Kategorie aus.';
            }
            
            if (empty($errors)) {
                // Thema aktualisieren
                $success = $forumAdmin->updateTopic($topicId, $title, $categoryId, $isSticky, $isLocked);
                
                if ($success) {
                    // Protokollieren
                    $logger->info("Forumthema aktualisiert", "forum", [
                        'user_id' => $user->getUserId(),
                        'topic_id' => $topicId,
                        'topic_title' => $title
                    ]);
                    
                    // Erfolgsmeldung setzen
                    $_SESSION['success_message'] = 'Thema erfolgreich aktualisiert.';
                    
                    // Weiterleitung zur Themenliste
                    header("Location: forum-manager.php?action=manage_topics&category_id={$topic['category_id']}");
                    exit;
                } else {
                    $errors[] = 'Ein Fehler ist aufgetreten. Bitte versuchen Sie es später erneut.';
                }
            }
            
            // Fehler an das Template übergeben
            $smarty->assign('errors', $errors);
            $smarty->assign('topic', [
                'topic_id' => $topicId,
                'title' => $title,
                'category_id' => $categoryId,
                'is_sticky' => $isSticky,
                'is_locked' => $isLocked
            ]);
        } else {
            // Thema an das Template übergeben
            $smarty->assign('topic', $topic);
        }
        
        // Kategorien an das Template übergeben
        $smarty->assign('categories', $categories);
        
        // Template anzeigen
        $smarty->display('admin/forum/edit_topic.tpl');
        break;
        
    case 'delete_topic':
        // Thema löschen
        $topicId = isset($_GET['id']) ? (int)$_GET['id'] : 0;
        
        if ($topicId <= 0) {
            header('Location: forum-manager.php');
            exit;
        }
        
        // Thema abrufen
        $topic = $forumAdmin->getTopic($topicId);
        
        if (!$topic) {
            header('Location: forum-manager.php');
            exit;
        }
        
        // Wenn das Formular abgesendet wurde
        if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['confirm'])) {
            // Thema löschen
            $success = $forumAdmin->deleteTopic($topicId);
            
            if ($success) {
                // Protokollieren
                $logger->info("Forumthema gelöscht", "forum", [
                    'user_id' => $user->getUserId(),
                    'topic_id' => $topicId,
                    'topic_title' => $topic['title']
                ]);
                
                // Erfolgsmeldung setzen
                $_SESSION['success_message'] = 'Thema erfolgreich gelöscht.';
                
                // Weiterleitung zur Themenliste
                header("Location: forum-manager.php?action=manage_topics&category_id={$topic['category_id']}");
                exit;
            } else {
                $smarty->assign('error', 'Ein Fehler ist aufgetreten. Bitte versuchen Sie es später erneut.');
            }
        }
        
        // Thema an das Template übergeben
        $smarty->assign('topic', $topic);
        
        // Template anzeigen
        $smarty->display('admin/forum/delete_topic.tpl');
        break;
        
    default:
        // Standardansicht: Liste der Kategorien
        $categories = $forumAdmin->getCategories();
        
        // Erfolgsmeldung aus der Session abrufen und löschen
        $successMessage = isset($_SESSION['success_message']) ? $_SESSION['success_message'] : '';
        unset($_SESSION['success_message']);
        
        // Daten an das Template übergeben
        $smarty->assign('categories', $categories);
        $smarty->assign('success_message', $successMessage);
        
        // Template anzeigen
        $smarty->display('admin/forum/index.tpl');
        break;
}
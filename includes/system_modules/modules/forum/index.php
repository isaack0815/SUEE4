<?php
/**
 * Hauptdatei des Forums
 * 
 * Zeigt die Forumkategorien und Themen an.
 */

// Sitzung starten
session_start();

// Konfiguration und Datenbankverbindung einbinden
require_once __DIR__ . '/../../includes/config.php';
require_once __DIR__ . '/../../classes/Database.php';
require_once __DIR__ . '/../../classes/User.php';
require_once __DIR__ . '/../../classes/Permission.php';
require_once __DIR__ . '/../../classes/Logger.php';
require_once __DIR__ . '/../../classes/Forum.php';

// Smarty-Template-Engine einbinden
require_once __DIR__ . '/../../includes/smarty.php';

// Benutzer-Objekt erstellen
$user = new User();

// Überprüfen, ob der Benutzer angemeldet ist
if (!$user->isLoggedIn()) {
    // Benutzer ist nicht angemeldet, zur Anmeldeseite weiterleiten
    header('Location: ../../login.php');
    exit;
}

// Überprüfen, ob der Benutzer die Berechtigung hat, das Forum anzusehen
$permission = new Permission();
if (!$permission->hasPermission($user->getUserId(), 'forum_view')) {
    // Benutzer hat keine Berechtigung, zur Startseite weiterleiten
    header('Location: ../../index.php');
    exit;
}

// Datenbankverbindung herstellen
$db = Database::getInstance();

// Logger-Instanz abrufen
$logger = Logger::getInstance();

// Forum-Klasse initialisieren
$forum = new Forum($db, $user);

// Aktion bestimmen
$action = isset($_GET['action']) ? $_GET['action'] : 'list';

// Je nach Aktion unterschiedliche Inhalte anzeigen
switch ($action) {
    case 'view_category':
        // Kategorie anzeigen
        $categoryId = isset($_GET['id']) ? (int)$_GET['id'] : 0;
        
        if ($categoryId <= 0) {
            header('Location: index.php');
            exit;
        }
        
        // Kategorie abrufen
        $category = $forum->getCategory($categoryId);
        
        if (!$category) {
            header('Location: index.php');
            exit;
        }
        
        // Seitennummerierung
        $page = isset($_GET['page']) ? (int)$_GET['page'] : 1;
        $perPage = 20;
        
        // Themen abrufen
        $topics = $forum->getTopics($categoryId, $page, $perPage);
        $totalTopics = $forum->getTopicsCount($categoryId);
        
        // Seitennavigation berechnen
        $totalPages = ceil($totalTopics / $perPage);
        if ($page > $totalPages) {
            $page = $totalPages;
        }
        
        // Daten an das Template übergeben
        $smarty->assign('category', $category);
        $smarty->assign('topics', $topics);
        $smarty->assign('page', $page);
        $smarty->assign('totalPages', $totalPages);
        $smarty->assign('can_create_topic', $permission->hasPermission($user->getUserId(), 'forum_create_topic'));
        
        // Template anzeigen
        $smarty->display('forum/category.tpl');
        break;
        
    case 'view_topic':
        // Thema anzeigen
        $topicId = isset($_GET['id']) ? (int)$_GET['id'] : 0;
        
        if ($topicId <= 0) {
            header('Location: index.php');
            exit;
        }
        
        // Thema abrufen
        $topic = $forum->getTopic($topicId);
        
        if (!$topic) {
            header('Location: index.php');
            exit;
        }
        
        // Seitennummerierung
        $page = isset($_GET['page']) ? (int)$_GET['page'] : 1;
        $perPage = 20;
        
        // Beiträge abrufen
        $posts = $forum->getPosts($topicId, $page, $perPage);
        $totalPosts = $forum->getPostsCount($topicId);
        
        // Seitennavigation berechnen
        $totalPages = ceil($totalPosts / $perPage);
        if ($page > $totalPages) {
            $page = $totalPages;
        }
        
        // Daten an das Template übergeben
        $smarty->assign('topic', $topic);
        $smarty->assign('posts', $posts);
        $smarty->assign('page', $page);
        $smarty->assign('totalPages', $totalPages);
        $smarty->assign('can_reply', $permission->hasPermission($user->getUserId(), 'forum_reply') && !$topic['is_locked']);
        $smarty->assign('can_edit_own', $permission->hasPermission($user->getUserId(), 'forum_edit_own'));
        $smarty->assign('can_delete_own', $permission->hasPermission($user->getUserId(), 'forum_delete_own'));
        $smarty->assign('is_admin', $permission->hasPermission($user->getUserId(), 'forum_admin'));
        $smarty->assign('user_id', $user->getUserId());
        
        // Template anzeigen
        $smarty->display('forum/topic.tpl');
        break;
        
    case 'new_topic':
        // Neues Thema erstellen
        if (!$permission->hasPermission($user->getUserId(), 'forum_create_topic')) {
            header('Location: index.php');
            exit;
        }
        
        $categoryId = isset($_GET['category_id']) ? (int)$_GET['category_id'] : 0;
        
        if ($categoryId <= 0) {
            header('Location: index.php');
            exit;
        }
        
        // Kategorie abrufen
        $category = $forum->getCategory($categoryId);
        
        if (!$category) {
            header('Location: index.php');
            exit;
        }
        
        // Wenn das Formular abgesendet wurde
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $title = isset($_POST['title']) ? trim($_POST['title']) : '';
            $content = isset($_POST['content']) ? trim($_POST['content']) : '';
            
            // Validierung
            $errors = [];
            
            if (empty($title)) {
                $errors[] = 'Bitte geben Sie einen Titel ein.';
            }
            
            if (empty($content)) {
                $errors[] = 'Bitte geben Sie einen Inhalt ein.';
            }
            
            if (empty($errors)) {
                // Thema erstellen
                $topicId = $forum->createTopic($categoryId, $title, $content);
                
                if ($topicId) {
                    // Protokollieren
                    $logger->info("Neues Thema erstellt", "forum", [
                        'user_id' => $user->getUserId(),
                        'topic_id' => $topicId,
                        'category_id' => $categoryId
                    ]);
                    
                    // Weiterleitung zum neuen Thema
                    header("Location: index.php?action=view_topic&id=$topicId");
                    exit;
                } else {
                    $errors[] = 'Ein Fehler ist aufgetreten. Bitte versuchen Sie es später erneut.';
                }
            }
            
            // Fehler an das Template übergeben
            $smarty->assign('errors', $errors);
            $smarty->assign('title', $title);
            $smarty->assign('content', $content);
        }
        
        // Daten an das Template übergeben
        $smarty->assign('category', $category);
        
        // Template anzeigen
        $smarty->display('forum/new_topic.tpl');
        break;
        
    case 'reply':
        // Auf ein Thema antworten
        if (!$permission->hasPermission($user->getUserId(), 'forum_reply')) {
            header('Location: index.php');
            exit;
        }
        
        $topicId = isset($_GET['topic_id']) ? (int)$_GET['topic_id'] : 0;
        
        if ($topicId <= 0) {
            header('Location: index.php');
            exit;
        }
        
        // Thema abrufen
        $topic = $forum->getTopic($topicId);
        
        if (!$topic) {
            header('Location: index.php');
            exit;
        }
        
        // Überprüfen, ob das Thema gesperrt ist
        if ($topic['is_locked'] && !$permission->hasPermission($user->getUserId(), 'forum_admin')) {
            header("Location: index.php?action=view_topic&id=$topicId");
            exit;
        }
        
        // Wenn das Formular abgesendet wurde
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $content = isset($_POST['content']) ? trim($_POST['content']) : '';
            
            // Validierung
            $errors = [];
            
            if (empty($content)) {
                $errors[] = 'Bitte geben Sie einen Inhalt ein.';
            }
            
            if (empty($errors)) {
                // Antwort erstellen
                $postId = $forum->createReply($topicId, $content);
                
                if ($postId) {
                    // Protokollieren
                    $logger->info("Antwort auf Thema erstellt", "forum", [
                        'user_id' => $user->getUserId(),
                        'topic_id' => $topicId,
                        'post_id' => $postId
                    ]);
                    
                    // Weiterleitung zum Thema
                    header("Location: index.php?action=view_topic&id=$topicId");
                    exit;
                } else {
                    $errors[] = 'Ein Fehler ist aufgetreten. Bitte versuchen Sie es später erneut.';
                }
            }
            
            // Fehler an das Template übergeben
            $smarty->assign('errors', $errors);
            $smarty->assign('content', $content);
        }
        
        // Daten an das Template übergeben
        $smarty->assign('topic', $topic);
        
        // Template anzeigen
        $smarty->display('forum/reply.tpl');
        break;
        
    default:
        // Standardansicht: Liste der Kategorien
        $categories = $forum->getCategories();
        
        // Daten an das Template übergeben
        $smarty->assign('categories', $categories);
        
        // Template anzeigen
        $smarty->display('forum/index.tpl');
        break;
}
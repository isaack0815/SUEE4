<?php
/**
 * Installationsskript für das Forum-Modul
 * 
 * Dieses Skript wird während der Installation des Moduls ausgeführt und
 * richtet die notwendigen Datenbanktabellen, Menüeinträge und Berechtigungen ein.
 */

// Sicherstellen, dass dieses Skript nur vom ModuleManager aufgerufen wird
if (!defined('MODULE_INSTALL')) {
    define('MODULE_INSTALL', true);
}

// Überprüfen, ob die notwendigen Variablen vorhanden sind
if (!isset($db) || !isset($moduleType) || !isset($logger)) {
    die('Dieses Skript kann nicht direkt aufgerufen werden.');
}

// Installationsdetails aktualisieren, falls vorhanden
if (isset($installDetails)) {
    $installDetails['logs'][] = [
        'type' => 'info',
        'message' => 'Starte Installation des Forum-Moduls...'
    ];
}

try {
    // 1. Datenbanktabellen erstellen
    $dbConnection = $db->getConnection();
    
    // Forum-Kategorien-Tabelle
    $sql = "
    CREATE TABLE IF NOT EXISTS forum_categories (
        category_id INT(11) NOT NULL AUTO_INCREMENT,
        name VARCHAR(255) NOT NULL,
        description TEXT,
        sort_order INT(11) DEFAULT 0,
        is_active TINYINT(1) DEFAULT 1,
        created_at DATETIME,
        updated_at DATETIME,
        PRIMARY KEY (category_id)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
    ";
    
    $success = $dbConnection->exec($sql) !== false;
    
    if (isset($installDetails)) {
        $installDetails['database_tables'][] = [
            'name' => 'forum_categories',
            'action' => 'Erstellt',
            'success' => $success
        ];
        
        $installDetails['logs'][] = [
            'type' => $success ? 'success' : 'error',
            'message' => $success ? 'Tabelle forum_categories erfolgreich erstellt.' : 'Fehler beim Erstellen der Tabelle forum_categories.'
        ];
    }
    
    // Forum-Themen-Tabelle
    $sql = "
    CREATE TABLE IF NOT EXISTS forum_topics (
        topic_id INT(11) NOT NULL AUTO_INCREMENT,
        category_id INT(11) NOT NULL,
        user_id INT(11) NOT NULL,
        title VARCHAR(255) NOT NULL,
        content TEXT,
        views INT(11) DEFAULT 0,
        is_sticky TINYINT(1) DEFAULT 0,
        is_locked TINYINT(1) DEFAULT 0,
        created_at DATETIME,
        updated_at DATETIME,
        PRIMARY KEY (topic_id),
        KEY category_id (category_id),
        KEY user_id (user_id)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
    ";
    
    $success = $dbConnection->exec($sql) !== false;
    
    if (isset($installDetails)) {
        $installDetails['database_tables'][] = [
            'name' => 'forum_topics',
            'action' => 'Erstellt',
            'success' => $success
        ];
        
        $installDetails['logs'][] = [
            'type' => $success ? 'success' : 'error',
            'message' => $success ? 'Tabelle forum_topics erfolgreich erstellt.' : 'Fehler beim Erstellen der Tabelle forum_topics.'
        ];
    }
    
    // Forum-Beiträge-Tabelle
    $sql = "
    CREATE TABLE IF NOT EXISTS forum_posts (
        post_id INT(11) NOT NULL AUTO_INCREMENT,
        topic_id INT(11) NOT NULL,
        user_id INT(11) NOT NULL,
        content TEXT,
        created_at DATETIME,
        updated_at DATETIME,
        PRIMARY KEY (post_id),
        KEY topic_id (topic_id),
        KEY user_id (user_id)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
    ";
    
    $success = $dbConnection->exec($sql) !== false;
    
    if (isset($installDetails)) {
        $installDetails['database_tables'][] = [
            'name' => 'forum_posts',
            'action' => 'Erstellt',
            'success' => $success
        ];
        
        $installDetails['logs'][] = [
            'type' => $success ? 'success' : 'error',
            'message' => $success ? 'Tabelle forum_posts erfolgreich erstellt.' : 'Fehler beim Erstellen der Tabelle forum_posts.'
        ];
    }
    
    // 2. Menüeinträge erstellen
    // Hauptmenüeintrag für das Forum
    $stmt = $dbConnection->prepare("
        INSERT INTO menu_items (title, url, icon, parent_id, sort_order, area, is_active, created_at, updated_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, NOW(), NOW())
    ");
    
    $success = $stmt->execute(['Forum', 'modules/forum/index.php', 'comments', 0, 50, 'main', 1]);
    $forumMenuId = $success ? $dbConnection->lastInsertId() : 0;
    
    if (isset($installDetails)) {
        $installDetails['menu_items'][] = [
            'title' => 'Forum',
            'area' => 'main',
            'url' => 'modules/forum/index.php',
            'success' => $success
        ];
        
        $installDetails['logs'][] = [
            'type' => $success ? 'success' : 'error',
            'message' => $success ? 'Menüeintrag "Forum" erfolgreich erstellt.' : 'Fehler beim Erstellen des Menüeintrags "Forum".'
        ];
    }
    
    // Admin-Menüeintrag für das Forum
    $stmt = $dbConnection->prepare("
        INSERT INTO menu_items (title, url, icon, parent_id, sort_order, area, is_active, created_at, updated_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, NOW(), NOW())
    ");
    
    $success = $stmt->execute(['Forum verwalten', 'admin/forum-manager.php', 'comments', 0, 60, 'admin', 1]);
    
    if (isset($installDetails)) {
        $installDetails['menu_items'][] = [
            'title' => 'Forum verwalten',
            'area' => 'admin',
            'url' => 'admin/forum-manager.php',
            'success' => $success
        ];
        
        $installDetails['logs'][] = [
            'type' => $success ? 'success' : 'error',
            'message' => $success ? 'Admin-Menüeintrag "Forum verwalten" erfolgreich erstellt.' : 'Fehler beim Erstellen des Admin-Menüeintrags "Forum verwalten".'
        ];
    }
    
    // 3. Berechtigungen erstellen
    $permissions = [
        [
            'name' => 'forum_view',
            'description' => 'Erlaubt das Ansehen des Forums'
        ],
        [
            'name' => 'forum_create_topic',
            'description' => 'Erlaubt das Erstellen neuer Themen im Forum'
        ],
        [
            'name' => 'forum_reply',
            'description' => 'Erlaubt das Antworten auf Themen im Forum'
        ],
        [
            'name' => 'forum_edit_own',
            'description' => 'Erlaubt das Bearbeiten eigener Beiträge im Forum'
        ],
        [
            'name' => 'forum_delete_own',
            'description' => 'Erlaubt das Löschen eigener Beiträge im Forum'
        ],
        [
            'name' => 'forum_admin',
            'description' => 'Erlaubt die Verwaltung des Forums (Admin)'
        ]
    ];
    
    $stmt = $dbConnection->prepare("
        INSERT INTO permissions (name, description, created_at, updated_at)
        VALUES (?, ?, NOW(), NOW())
    ");
    
    foreach ($permissions as $permission) {
        // Überprüfen, ob die Berechtigung bereits existiert
        $checkStmt = $dbConnection->prepare("SELECT permission_id FROM permissions WHERE name = ?");
        $checkStmt->execute([$permission['name']]);
        $exists = $checkStmt->rowCount() > 0;
        
        if (!$exists) {
            $success = $stmt->execute([$permission['name'], $permission['description']]);
            
            if (isset($installDetails)) {
                $installDetails['permissions'][] = [
                    'name' => $permission['name'],
                    'description' => $permission['description'],
                    'success' => $success
                ];
                
                $installDetails['logs'][] = [
                    'type' => $success ? 'success' : 'error',
                    'message' => $success ? "Berechtigung '{$permission['name']}' erfolgreich erstellt." : "Fehler beim Erstellen der Berechtigung '{$permission['name']}'."
                ];
            }
        } else {
            if (isset($installDetails)) {
                $installDetails['logs'][] = [
                    'type' => 'warning',
                    'message' => "Berechtigung '{$permission['name']}' existiert bereits und wurde übersprungen."
                ];
            }
        }
    }
    
    // 4. Standardgruppen mit den neuen Berechtigungen aktualisieren
    // Administratoren erhalten alle Forum-Berechtigungen
    $stmt = $dbConnection->prepare("
        SELECT group_id FROM user_groups WHERE name = 'Administratoren'
    ");
    $stmt->execute();
    $adminGroup = $stmt->fetch(PDO::FETCH_ASSOC);
    
    if ($adminGroup) {
        $adminGroupId = $adminGroup['group_id'];
        
        // Alle Forum-Berechtigungen dem Admin hinzufügen
        $stmt = $dbConnection->prepare("
            SELECT permission_id FROM permissions WHERE name LIKE 'forum_%'
        ");
        $stmt->execute();
        $forumPermissions = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        $insertStmt = $dbConnection->prepare("
            INSERT IGNORE INTO group_permissions (group_id, permission_id)
            VALUES (?, ?)
        ");
        
        foreach ($forumPermissions as $permission) {
            $success = $insertStmt->execute([$adminGroupId, $permission['permission_id']]);
            
            if (isset($installDetails)) {
                $installDetails['logs'][] = [
                    'type' => $success ? 'success' : 'warning',
                    'message' => $success ? "Berechtigung ID {$permission['permission_id']} zur Administratorengruppe hinzugefügt." : "Berechtigung ID {$permission['permission_id']} konnte nicht zur Administratorengruppe hinzugefügt werden."
                ];
            }
        }
    }
    
    // Registrierte Benutzer erhalten grundlegende Forum-Berechtigungen
    $stmt = $dbConnection->prepare("
        SELECT group_id FROM user_groups WHERE name = 'Registrierte Benutzer'
    ");
    $stmt->execute();
    $userGroup = $stmt->fetch(PDO::FETCH_ASSOC);
    
    if ($userGroup) {
        $userGroupId = $userGroup['group_id'];
        
        // Grundlegende Berechtigungen für registrierte Benutzer
        $basicPermissions = ['forum_view', 'forum_create_topic', 'forum_reply', 'forum_edit_own', 'forum_delete_own'];
        
        $stmt = $dbConnection->prepare("
            SELECT permission_id, name FROM permissions WHERE name IN ('" . implode("','", $basicPermissions) . "')
        ");
        $stmt->execute();
        $userPermissions = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        $insertStmt = $dbConnection->prepare("
            INSERT IGNORE INTO group_permissions (group_id, permission_id)
            VALUES (?, ?)
        ");
        
        foreach ($userPermissions as $permission) {
            $success = $insertStmt->execute([$userGroupId, $permission['permission_id']]);
            
            if (isset($installDetails)) {
                $installDetails['logs'][] = [
                    'type' => $success ? 'success' : 'warning',
                    'message' => $success ? "Berechtigung '{$permission['name']}' zur Benutzergruppe hinzugefügt." : "Berechtigung '{$permission['name']}' konnte nicht zur Benutzergruppe hinzugefügt werden."
                ];
            }
        }
    }
    
    // 5. Beispielkategorien erstellen
    $categories = [
        [
            'name' => 'Allgemeine Diskussion',
            'description' => 'Allgemeine Diskussionen zu verschiedenen Themen',
            'sort_order' => 1
        ],
        [
            'name' => 'Hilfe & Support',
            'description' => 'Fragen und Antworten zur Nutzung der Plattform',
            'sort_order' => 2
        ],
        [
            'name' => 'Ankündigungen',
            'description' => 'Wichtige Ankündigungen und Updates',
            'sort_order' => 0
        ]
    ];
    
    $stmt = $dbConnection->prepare("
        INSERT INTO forum_categories (name, description, sort_order, is_active, created_at, updated_at)
        VALUES (?, ?, ?, 1, NOW(), NOW())
    ");
    
    foreach ($categories as $category) {
        $success = $stmt->execute([$category['name'], $category['description'], $category['sort_order']]);
        
        if (isset($installDetails)) {
            $installDetails['logs'][] = [
                'type' => $success ? 'success' : 'error',
                'message' => $success ? "Forumkategorie '{$category['name']}' erfolgreich erstellt." : "Fehler beim Erstellen der Forumkategorie '{$category['name']}'."
            ];
        }
    }
    
    // 6. Klassen kopieren
    // Die Klassen werden während der Installation in das classes-Verzeichnis kopiert
    $classFiles = [
        'Forum.php' => 'classes/Forum.php',
        'ForumAdmin.php' => 'classes/ForumAdmin.php'
    ];
    
    foreach ($classFiles as $sourceFile => $targetFile) {
        if (isset($installDetails)) {
            $installDetails['logs'][] = [
                'type' => 'info',
                'message' => "Kopiere Klassendatei: $sourceFile nach $targetFile"
            ];
        }
    }
    
    if (isset($installDetails)) {
        $installDetails['logs'][] = [
            'type' => 'success',
            'message' => 'Installation des Forum-Moduls erfolgreich abgeschlossen.'
        ];
    }
    
    $logger->info("Forum-Modul erfolgreich installiert", "module");
    
    return [
        'success' => true,
        'message' => 'Forum-Modul erfolgreich installiert.'
    ];
    
} catch (Exception $e) {
    if (isset($installDetails)) {
        $installDetails['logs'][] = [
            'type' => 'error',
            'message' => 'Fehler bei der Installation des Forum-Moduls: ' . $e->getMessage()
        ];
    }
    
    $logger->error("Fehler bei der Installation des Forum-Moduls", "module", [
        'error' => $e->getMessage(),
        'trace' => $e->getTraceAsString()
    ]);
    
    return [
        'success' => false,
        'message' => 'Fehler bei der Installation des Forum-Moduls: ' . $e->getMessage()
    ];
}